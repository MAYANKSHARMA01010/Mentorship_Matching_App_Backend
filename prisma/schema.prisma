// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ====================
// Mentor
// ====================
model Mentor {
  id         String   @id @default(cuid())
  name       String
  username   String   @unique
  email      String?  @unique
  githubId   String   @unique
  githubName String?
  bio        String?
  avatarUrl  String?
  skills     String[] // multiple skills
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  mentees      Mentee[]       @relation("MentorMentees")
  messages     Message[]      @relation("MentorMessages")
  groups       Group[]        @relation("GroupsCreated")
  friends      MentorFriend[] @relation("MentorFriends")
  GroupMember  GroupMember[]
  MentorFriend MentorFriend[]
}

// ====================
// Mentee
// ====================
model Mentee {
  id         String   @id @default(cuid())
  name       String
  username   String   @unique
  email      String?  @unique
  githubId   String   @unique
  githubName String?
  bio        String?
  avatarUrl  String?
  skills     String[] // mentees can also list skills
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  mentor      Mentor        @relation("MentorMentees", fields: [mentorId], references: [id])
  mentorId    String
  messages    Message[]     @relation("MenteeMessages")
  GroupMember GroupMember[]
}

// ====================
// Messages
// ====================
model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  // Relations
  mentor   Mentor? @relation("MentorMessages", fields: [mentorId], references: [id])
  mentorId String?

  mentee   Mentee? @relation("MenteeMessages", fields: [menteeId], references: [id])
  menteeId String?

  group   Group?  @relation(fields: [groupId], references: [id])
  groupId String?
}

// ====================
// Groups (mentors can create)
// ====================
model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())

  createdBy   Mentor @relation("GroupsCreated", fields: [createdById], references: [id])
  createdById String

  members  GroupMember[]
  messages Message[]
}

// ====================
// Group Membership
// ====================
model GroupMember {
  id       String   @id @default(cuid())
  joinedAt DateTime @default(now())

  mentor   Mentor? @relation(fields: [mentorId], references: [id])
  mentorId String?

  mentee   Mentee? @relation(fields: [menteeId], references: [id])
  menteeId String?

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String
}

// ====================
// Mentorâ€“Mentor Friendships
// ====================
model MentorFriend {
  id       String @id @default(cuid())
  mentor   Mentor @relation("MentorFriends", fields: [mentorId], references: [id])
  mentorId String
  friend   Mentor @relation(fields: [friendId], references: [id])
  friendId String
}
